symbol_max_sr_each_cluster <- data.frame(symbol = character(),
sharpe_ratio = integer())
# loop for get maximum Sharpe ratio of each cluster and append to empty tibble
for (i in 1:k) {
x <- stocks_sharpe_ratio %>%
filter(km.cluster==i)
x <- stocks_sharpe_ratio %>%
filter(sharpe_ratio==max(x$sharpe_ratio)) %>%
select(symbol, sharpe_ratio)
symbol_max_sr_each_cluster <- bind_rows(symbol_max_sr_each_cluster, x)
}
# return symbol_max_sr_each_cluster
return(symbol_max_sr_each_cluster)
}
# Get symbol of portfolio for optimization
symbol_for_optimization <- symbol_optimize_func()
symbol_for_optimization
symbol_for_optimization <- symbol_for_optimization[["symbol"]]
#-----------------------------------------------------------------------------#
# create function for optimization portfolio
optimize_function <- function(symbol,
num_loop) {
#-----------------------------------------------------------------------------#
# Storing return of stock
stock_daily_returns <- symbol %>%
tq_get(from = date_from,
to = date_to) %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = 'daily',
col_rename = 'stock_ret')
#-----------------------------------------------------------------------------#
# Calculating geometric mean return of each stocks
geometric_mean_ret <- stock_daily_returns %>%
tq_performance(Ra = stock_ret,
performance_fun = Return.annualized,
scale = 252)
# Calculating covariance matrix of each stocks
cov_matrix <- stock_daily_returns %>%
spread(symbol, value = stock_ret) %>%
select(!(date)) %>%
cov() * 252
#-----------------------------------------------------------------------------#
# Define number of loop
num_port <- num_loop
# Creating a matrix to store the weights
all_wts <- matrix(nrow = num_port,
ncol = length(symbol))
# Creating an empty vector to store
# Portfolio returns
port_returns <- vector('numeric', length = num_port)
# Creating an empty vector to store
# Portfolio Standard deviations
port_risk <- vector('numeric', length = num_port)
# Creating an empty vector to store
# Portfolio Sharpe Ratios
sharpe_ratio <- vector('numeric', length = num_port)
#-----------------------------------------------------------------------------#
# Loop storing weight, return, standard deviation and Sharpe ratio
for (i in seq_along(port_returns)) {
# random weight and adjusted sum weight = 1
wts <- runif(length(symbol))
wts <- wts/sum(wts)
# Storing weight in the matrix
all_wts[i,] <- wts
# Calculating portfolio annualized return
port_ret <- sum(wts * geometric_mean_ret$AnnualizedReturn)
# Storing portfolio annualized returns
port_returns[i] <- port_ret
# Calculating portfolio risk (standard deviation)
port_sd <- sqrt(t(wts) %*% (cov_matrix  %*% wts))
# Storing portfolio risks (standard deviation)
port_risk[i] <- port_sd
# Calculating portfolio Sharpe ratio
port_sr <- port_ret / port_sd
# Storing portfolio Sharpe ratio (Assuming 0% Risk free rate)
sharpe_ratio[i] <- port_sr
}
#-----------------------------------------------------------------------------#
# Create portfolio values to store returns, risks and Sharpe ratios
portfolio_values <- tibble(Return = port_returns,
Risk = port_risk,
SharpeRatio = sharpe_ratio)
# Rename columns all weights by symbol
all_wts <- tk_tbl(all_wts)
colnames(all_wts) <- symbol
# Combing all the values together
portfolio_values <- tk_tbl(cbind(all_wts, portfolio_values))
#-----------------------------------------------------------------------------#
# Create min_var to store minimum variance
min_var <- portfolio_values[which.min(portfolio_values$Risk),]
# Create max_sr to store maximum Sharpe ratio
max_sr <- portfolio_values[which.max(portfolio_values$SharpeRatio),]
#-----------------------------------------------------------------------------#
# Storing bar plot weight of minimum variance
barplot_wts_min_var <- min_var %>%
gather(-(Return:SharpeRatio),
key = Asset,
value = Weights) %>%
mutate(Asset = as.factor(Asset)) %>%
ggplot(aes(x = fct_reorder(Asset,Weights), y = Weights, fill = Asset)) +
geom_bar(stat = 'identity') +
theme_minimal() +
labs(x = 'Assets',
y = 'Weights',
title = "Minimum Variance Portfolio Weights") +
scale_y_continuous(labels = scales::percent)
# Storing bar plot weight of maximum Sharpe ratio
barplot_wts_max_sr <- max_sr %>%
gather(-(Return:SharpeRatio),
key = Asset,
value = Weights) %>%
mutate(Asset = as.factor(Asset)) %>%
ggplot(aes(x = fct_reorder(Asset,Weights), y = Weights, fill = Asset)) +
geom_bar(stat = 'identity') +
theme_minimal() +
labs(x = 'Assets',
y = 'Weights',
title = "Maximum Sharpe Ratio Weights") +
scale_y_continuous(labels = scales::percent)
# Storing graph Efficient frontier
eff_frontier <- portfolio_values %>%
ggplot(aes(x = Risk, y = Return, color = SharpeRatio)) +
geom_point() +
theme_classic() +
scale_y_continuous(labels = scales::percent) +
scale_x_continuous(labels = scales::percent) +
labs(x = 'Annualized Risk',
y = 'Annualized Returns',
title = "Portfolio Optimization & Efficient Frontier") +
geom_point(aes(x = Risk,
y = Return), data = min_var, color = 'green') +
geom_point(aes(x = Risk,
y = Return), data = max_sr, color = 'red')
#-----------------------------------------------------------------------------#
# Storing and return result
result <- list(
portfolio_values = portfolio_values,
min_var = min_var,
max_sr = max_sr,
barplot_wts_min_var = barplot_wts_min_var,
barplot_wts_max_sr = barplot_wts_max_sr,
eff_frontier = eff_frontier
)
return(result)
}
#-----------------------------------------------------------------------------#
# Get list of optimal portfolio
# : Storing :
# Portfolio 100000 portfolios
# Portfolio : Minimum variance
# Portfolio : Maximum Sharpe ratio
# bar plot for plot weight of Portfolio Maximum Sharpe ratio
# bar plot for plot weight of Portfolio Minimum Sharpe ratio
# Efficient frontier graph
optimal_portfolio <- optimize_function(symbol = symbol_for_optimization,
num_loop = 100000)
#-----------------------------------------------------------------------------#
## Save table and graph by loop
# export portfolio values of each portfolio to .csv
port_val <- optimal_portfolio$portfolio_values
port_val %>%
write_csv(paste0(path, "data/optimization_portfolio_values.csv"))
# export min varaince of each portfolio to .csv
min_var <- optimal_portfolio$min_var
min_var %>%
write_csv(paste0(path, "data/optimize_portfolio_min_var.csv"))
# export max sharpe ratio of each portfolio to .csv
max_sr <- optimal_portfolio$max_sr
max_sr %>%
write_csv(paste0(path, "data/optimize_portfolio_max_sr.csv"))
# plot and export bar plot of min variance weight to .png
bar_min_var <- optimal_portfolio$barplot_wts_min_var
png(file = paste0(path, "graph/barplot_wts_min_var.png"))
plot(bar_min_var)
dev.off()
# plot and export bar plot of max sharpe ratio weight to .png
bar_max_sr <- optimal_portfolio$barplot_wts_max_sr
png(file = paste0(path, "graph/barplot_wts_max_sr.png"))
plot(bar_max_sr)
dev.off()
# plot and export graph efficient frontier to .png
eff_frontier <- optimal_portfolio$eff_frontier
png(file = paste0(path, "graph/efficient_frontier.png"))
plot(eff_frontier)
dev.off()
#-----------------------------------------------------------------------------#
# Plot graph by "Plotly" package
ggplotly(bar_min_var)
ggplotly(bar_max_sr)
ggplotly(eff_frontier)
#-----------------------------------------------------------------------------#
# Create function for read max_sr.csv of each cluster and append together
max_sr_append <- read_csv(paste0(path, "data/optimize_portfolio_max_sr"))
# Get symbol of portfolio for optimization
symbol_for_optimization <- symbol_optimize_func()
symbol_for_optimization %>% write_csv(paste0(path, "symbol_for_optimization.csv"))
symbol_for_optimization <- symbol_for_optimization[["symbol"]]
# Get symbol of portfolio for optimization
porfolio_optimization <- symbol_optimize_func()
portfolio_optimization %>% write_csv(paste0(path, "symbol_for_optimization.csv"))
# Get symbol of portfolio for optimization
porfolio_optimization <- symbol_optimize_func()
portfolio_optimization %>% write_csv(paste0(path, "portfolio_optimization.csv"))
# Get symbol of portfolio for optimization
porfolio_optimization <- symbol_optimize_func() %>% as.data.frame()
portfolio_optimization %>% write_csv(paste0(path, "portfolio_optimization.csv"))
View(porfolio_optimization)
rm(porfolio_optimization)
# Get symbol of portfolio for optimization
portfolio_optimization <- symbol_optimize_func() %>% as.data.frame()
portfolio_optimization %>% write_csv(paste0(path, "portfolio_optimization.csv"))
symbol_for_optimization <- symbol_for_optimization[["symbol"]]
symbol_for_optimization <- portfolio_optimization[["symbol"]]
portfolio_optimization %>% write_csv(paste0(path, "data/portfolio_optimization.csv"))
# Get symbol portfolio
portfolio_symbol <- read_csv(paste0(path, "data/portfolio_optimization.csv"))[["symbol"]]
# Create function for plot portfolio growth graph what compare with SET index
port_growth_func <- function(symbol,
port_wts = NULL) {
#--------------------------------------------------------------------------------------#
# Get portfolio growth
portfolio_growth <- symbol %>%
tq_get(from = date_from,
to = date_to) %>%
na.omit() %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun= periodReturn,
period = "daily",
col_rename = "stock_return",
type = "log") %>%
tq_portfolio(assets_col = symbol,
returns_col = stock_return,
weights = port_wts,
col_rename= "port_growth",
wealth.index= TRUE)
#--------------------------------------------------------------------------------------#
# Get benchmark growth
benchmark_growth <- tq_get("^SET.BK",
from = date_from,
to = date_to) %>%
na.omit() %>%
tq_transmute(select = adjusted,
mutate_fun= periodReturn,
period = "daily",
col_rename= "set_return",
type = "log") %>%
mutate(symbol="SET.BK") %>%
tq_portfolio(assets_col= symbol,
returns_col= set_return,
col_rename= "set_growth",
wealth.index= TRUE)
#--------------------------------------------------------------------------------------#
# Plot comparison graph between portfolio and SET index
port_graph <- ggplot() +
geom_line(
data=portfolio_growth,
mapping=aes(x=date, y=port_growth),
color="blue") +
geom_line(
data=benchmark_growth,
mapping=aes(x=date, y=set_growth),
color="red") +
theme_bw()
return(port_graph)
}
# Read optimize_portfolio_max_sr.csv
max_sr_append <- read_csv(paste0(path, "data/optimize_portfolio_max_sr.csv"))
max_sr_append
# Read optimize_portfolio_min_var.csv
min_var_append <- read_csv(paste0(path, "data/optimize_portfolio_min_var.csv"))
min_var_append
# Get symbol portfolio
portfolio_symbol <- read_csv(paste0(path, "data/portfolio_optimization.csv"))[["symbol"]]
# Create function for get optimal weight
get_opti_wts_func <- function(type_data) {
opti_wts_port <- read.csv(paste0(path, "data/optimization_portfolio_", type_data, ".csv")) %>%
select(-Return, -Risk, -SharpeRatio)
opti_wts_port <- data.frame(r1=names(opti_wts_port),
t(opti_wts_port),
row.names = NULL)
colnames(opti_wts_port) <- c("symbol", "weights")
return(opti_wts_port)
}
# Create function for plot portfolio growth graph what compare with SET index
port_growth_func <- function(symbol,
port_wts = NULL) {
#--------------------------------------------------------------------------------------#
# Get portfolio growth
portfolio_growth <- symbol %>%
tq_get(from = date_from,
to = date_to) %>%
na.omit() %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun= periodReturn,
period = "daily",
col_rename = "stock_return",
type = "log") %>%
tq_portfolio(assets_col = symbol,
returns_col = stock_return,
weights = port_wts,
col_rename= "port_growth",
wealth.index= TRUE)
#--------------------------------------------------------------------------------------#
# Get benchmark growth
benchmark_growth <- tq_get("^SET.BK",
from = date_from,
to = date_to) %>%
na.omit() %>%
tq_transmute(select = adjusted,
mutate_fun= periodReturn,
period = "daily",
col_rename= "set_return",
type = "log") %>%
mutate(symbol="SET.BK") %>%
tq_portfolio(assets_col= symbol,
returns_col= set_return,
col_rename= "set_growth",
wealth.index= TRUE)
#--------------------------------------------------------------------------------------#
# Plot comparison graph between portfolio and SET index
port_graph <- ggplot() +
geom_line(
data=portfolio_growth,
mapping=aes(x=date, y=port_growth),
color="blue") +
geom_line(
data=benchmark_growth,
mapping=aes(x=date, y=set_growth),
color="red") +
theme_bw()
return(port_graph)
}
# Get optimal weight of max Sharpe ratio portfolio and min variance portfolio
opti_wts_max_sr <- get_opti_wts_func(type_data = "max_sr")
# Get optimal weight of max Sharpe ratio portfolio and min variance portfolio
opti_wts_max_sr <- get_opti_wts_func(type_data = "max_sr")
# Create function for get optimal weight
get_opti_wts_func <- function(type_data) {
opti_wts_port <- read.csv(paste0(path, "data/optimize_portfolio_", type_data, ".csv")) %>%
select(-Return, -Risk, -SharpeRatio)
opti_wts_port <- data.frame(r1=names(opti_wts_port),
t(opti_wts_port),
row.names = NULL)
colnames(opti_wts_port) <- c("symbol", "weights")
return(opti_wts_port)
}
# Get optimal weight of max Sharpe ratio portfolio and min variance portfolio
opti_wts_max_sr <- get_opti_wts_func(type_data = "max_sr")
opti_wts_min_var <- get_opti_wts_func(type_data = "min_var")
port_val %>%
write_csv(paste0(path, "data/optimize_portfolio_values.csv"))
View(opti_wts_max_sr)
rm(max_sr_append, min_var_append)
max_sr <- read_csv(paste0(path, "data/optimize_portfolio_max_sr.csv"))
max_sr
# Read optimize_portfolio_min_var.csv
min_var <- read_csv(paste0(path, "data/optimize_portfolio_min_var.csv"))
min_var
# Create function for get optimal weight
get_opti_wts_func <- function(data) {
opti_wts_port <- data %>%
select(-Return, -Risk, -SharpeRatio)
opti_wts_port <- data.frame(r1=names(opti_wts_port),
t(opti_wts_port),
row.names = NULL)
colnames(opti_wts_port) <- c("symbol", "weights")
return(opti_wts_port)
}
# Get optimal weight of max Sharpe ratio portfolio and min variance portfolio
opti_wts_max_sr <- get_opti_wts_func(data = max_sr)
opti_wts_min_var <- get_opti_wts_func(data = min_var)
#--------------------------------------------------------------------------------------#
##### Use Best Max Sharpe Ratio stocks #####
# Create graph from optimal weight maximum Sharpe ratio portfolio
opti_wts_max_sr_graph <- port_growth_func(symbol = portfolio_symbol,
port_wts = opti_wts_max_sr)
# Get symbol portfolio
portfolio_symbol <- read_csv(paste0(path, "data/portfolio_optimization.csv"))["symbol"]
# Get symbol portfolio
portfolio_symbol <- read_csv(paste0(path, "data/portfolio_optimization.csv"))[["symbol"]] %>%
as.vector()
# Create graph from optimal weight maximum Sharpe ratio portfolio
opti_wts_max_sr_graph <- port_growth_func(symbol = portfolio_symbol,
port_wts = opti_wts_max_sr)
# Create graph from optimal weight maximum Sharpe ratio portfolio
opti_wts_max_sr_graph <- port_growth_func(symbol = symbol_for_optimization,
port_wts = opti_wts_max_sr)
portfolio_growth <- portfolio_symbol %>%
tq_get(from = date_from,
to = date_to) %>%
na.omit() %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun= periodReturn,
period = "daily",
col_rename = "stock_return",
type = "log") %>%
tq_portfolio(assets_col = symbol,
returns_col = stock_return,
weights = port_wts,
col_rename= "port_growth",
wealth.index= TRUE)
portfolio_growth <- portfolio_symbol %>%
tq_get(from = date_from,
to = date_to) %>%
na.omit() %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun= periodReturn,
period = "daily",
col_rename = "stock_return",
type = "log") %>%
tq_portfolio(assets_col = symbol,
returns_col = stock_return,
weights = NULL,
col_rename= "port_growth",
wealth.index= TRUE)
rm(portfolio_growth)
# Create function for plot portfolio growth graph what compare with SET index
port_growth_func <- function(port_symbol,
port_wts = NULL) {
#--------------------------------------------------------------------------------------#
# Get portfolio growth
portfolio_growth <- port_symbol %>%
tq_get(from = date_from,
to = date_to) %>%
na.omit() %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun= periodReturn,
period = "daily",
col_rename = "stock_return") %>%
tq_portfolio(assets_col = symbol,
returns_col = stock_return,
weights = port_wts,
col_rename= "port_growth",
wealth.index= TRUE)
#--------------------------------------------------------------------------------------#
# Get benchmark growth
benchmark_growth <- tq_get("^SET.BK",
from = date_from,
to = date_to) %>%
na.omit() %>%
tq_transmute(select = adjusted,
mutate_fun= periodReturn,
period = "daily",
col_rename= "set_return") %>%
mutate(symbol="SET.BK") %>%
tq_portfolio(assets_col= symbol,
returns_col= set_return,
col_rename= "set_growth",
wealth.index= TRUE)
#--------------------------------------------------------------------------------------#
# Plot comparison graph between portfolio and SET index
port_graph <- ggplot() +
geom_line(
data=portfolio_growth,
mapping=aes(x=date, y=port_growth),
color="blue") +
geom_line(
data=benchmark_growth,
mapping=aes(x=date, y=set_growth),
color="red") +
theme_bw()
return(port_graph)
}
# Create graph from optimal weight maximum Sharpe ratio portfolio
opti_wts_max_sr_graph <- port_growth_func(port_symbol = portfolio_symbol,
port_wts = opti_wts_max_sr)
##### Use Best Max Sharpe Ratio stocks #####
# Create graph from optimal weight maximum Sharpe ratio portfolio
opti_wts_max_sr_graph <- port_growth_func(port_symbol = portfolio_symbol,
port_wts = opti_wts_max_sr)
png(file=paste0(path,"graph/portgrowth_optimal_weight_max_sr_graph.png"))
plot(opti_wts_max_sr_graph + labs(x = "Date",
y = "Return",
title = "Portfolio growth return : Optimal weight max Sharpe ratio"))
dev.off()
# Create graph from equally weight maximum Sharpe ratio portfolio
eq_wts_max_sr_graph <- port_growth_func(port_symbol = portfolio_symbol)
png(file=paste0(path,"graph/portgrowth_equally_weight_max_sr_graph.png"))
plot(eq_wts_max_sr_graph + labs(x = "Date",
y = "Return",
title = "Portfolio growth return : Equally weight max Sharpe ratio"))
dev.off()
#--------------------------------------------------------------------------------------#
##### Use Best Min Variance stocks #####
# Create graph from optimal weight minimum variance portfolio
opti_wts_min_var_graph <- port_growth_func(symbol = portfolio_symbol,
port_wts = opti_wts_min_var)
##### Use Best Min Variance stocks #####
# Create graph from optimal weight minimum variance portfolio
opti_wts_min_var_graph <- port_growth_func(port_symbol = portfolio_symbol,
port_wts = opti_wts_min_var)
png(file=paste0(path,"graph/portgrowth_optimal_weight_min_var_graph.png"))
plot(opti_wts_min_var_graph + labs(x = "Date",
y = "Return",
title = "Portfolio growth return : Optimal weight min variance"))
dev.off()
# Create graph from equally weight minimum variance portfolio
eq_wts_min_var_graph <- port_growth_func(port_symbol = portfolio_symbol)
png(file=paste0(path,"graph/portgrowth_equally_weight_min_var_graph.png"))
plot(eq_wts_min_var_graph + labs(x = "Date",
y = "Return",
title = "Portfolio growth return : Equally weight min variance"))
dev.off()
#--------------------------------------------------------------------------------------#
setwd("~/Project_R")
